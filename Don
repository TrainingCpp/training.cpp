#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <unordered_map>

class Memory {
public:
    Memory() {
        // Initialize memory with 64KB (65536 bytes)
        memory.resize(65536, 0);
    }

    int read(int address) {
        return memory[address];
    }

    void write(int address, int value) {
        memory[address] = value;
    }

    void printSnapshot() {
        for (int i = 0; i < 16; ++i) {
            std::cout << i << " -> " << memory[i] << std::endl;
        }
    }

private:
    std::vector<int> memory;
};

class Registers {
public:
    Registers() {
        // Initialize registers to 0
        registers["AX"] = 0;
        registers["BX"] = 0;
        registers["CX"] = 0;
        registers["DX"] = 0;
    }

    int get(const std::string& reg) {
        return registers[reg];
    }

    void set(const std::string& reg, int value) {
        registers[reg] = value;
    }

    void printSnapshot() {
        std::cout << "AX: " << registers["AX"] << std::endl;
        std::cout << "BX: " << registers["BX"] << std::endl;
        std::cout << "CX: " << registers["CX"] << std::endl;
        std::cout << "DX: " << registers["DX"] << std::endl;
    }

private:
    std::unordered_map<std::string, int> registers;
};

class Processor {
public:
    Processor() : pc(0), running(true) {}

    void loadInstructions(const std::vector<std::string>& instructions) {
        this->instructions = instructions;
    }

    void execute(Memory& memory, Registers& registers) {
        while (running && pc < instructions.size()) {
            std::string instruction = instructions[pc];
            parseAndExecute(instruction, memory, registers);
            pc++;
        }
    }

    void printSnapshot(Memory& memory, Registers& registers) {
        std::cout << "Received Interrupt" << std::endl;
        registers.printSnapshot();
        memory.printSnapshot();
    }

private:
    int pc; // Program Counter
    bool running;
    std::vector<std::string> instructions;

    void parseAndExecute(const std::string& instruction, Memory& memory, Registers& registers) {
        std::istringstream iss(instruction);
        std::string op;
        iss >> op;

        if (op == "MOV") {
            handleMOV(iss, memory, registers);
        } else if (op == "ADD") {
            handleADD(iss, registers);
        } else if (op == "SUB") {
            handleSUB(iss, registers);
        } else if (op == "MUL") {
            handleMUL(iss, registers);
        } else if (op == "DIV") {
            handleDIV(iss, registers);
        } else if (op == "HLT") {
            running = false;
        }
    }

    void handleMOV(std::istringstream& iss, Memory& memory, Registers& registers) {
        std::string dest, src;
        iss >> dest >> src;

        if (src[0] == '[') { // Memory address
            int address = std::stoi(src.substr(1, src.size() - 2));
            if (dest[0] == '[') { // Memory to Memory
                int srcValue = memory.read(address);
                int destAddress = std::stoi(dest.substr(1, dest.size() - 2));
                memory.write(destAddress, srcValue);
            } else { // Register to Memory
                memory.write(std::stoi(dest.substr(1, dest.size() - 2)), registers.get(src));
            }
        } else if (isdigit(src[0]) || src[0] == '-') { // Immediate value
            if (dest[0] == '[') { // Memory
                memory.write(std::stoi(dest.substr(1, dest.size() - 2)), std::stoi(src));
            } else { // Register
                registers.set(dest, std::stoi(src));
            }
        } else { // Register to Register
            registers.set(dest, registers.get(src));
        }
    }

    void handleADD(std::istringstream& iss, Registers& registers) {
        std::string dest, src;
        iss >> dest >> src;
        int value = (isdigit(src[0]) || src[0] == '-') ? std::stoi(src) : registers.get(src);
        registers.set("AX", registers.get(dest) + value);
    }

    void handleSUB(std::istringstream& iss, Registers& registers) {
        std::string dest, src;
        iss >> dest >> src;
        int value = (isdigit(src[0]) || src[0] == '-') ? std::stoi(src) : registers.get(src);
        registers.set("AX", registers.get(dest) - value);
    }

    void handleMUL(std::istringstream& iss, Registers& registers) {
        std::string dest;
        int value;
        iss >> dest >> value;
        registers.set("AX", registers.get(dest) * value);
    }

    void handleDIV(std::istringstream& iss, Registers& registers) {
        std::string dest;
        iss >> dest;
        int divisor = registers.get(dest);
        if (divisor != 0) {
            registers.set("AX", registers.get("AX") / divisor);
        } else {
            std::cerr << "Division by zero error!" << std::endl;
        }
    }
};

int main() {
    Memory memory;
    Registers registers;
    Processor processor;

    // Read instructions from file
    std::ifstream infile("instructions.txt");
    std::vector<std::string> instructions;
    std::string line;

    while (std::getline(infile, line)) {
        if (line == "HLT") {
            instructions.push_back(line);
            break;
        }
        instructions.push_back(line);
    }

    processor.loadInstructions(instructions);
    processor.execute(memory, registers);
    processor.printSnapshot(memory, registers);

    return 0;
}
